{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","textMode","TextForm","myStyle","backgroundColor","color","useState","text","setText","heading","value","onChange","event","target","style","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","Alert","class","alert","role","msg","defaultPros","aboutText","App","setMode","setTextMode","setAlert","message","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ce51b990.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-Link active text-decoration-none\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-Link text-decoration-none\" href=\"/about\">About Us</a>\r\n              </li>   */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.textMode}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string\r\n}\r\nNavbar.defaultPros={\r\n    title:\"Set title here\",\r\n    aboutText:\"About text here\"\r\n};\r\n","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n        //console.log('Uppercase was clicked');\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\",\"Success\")\r\n    }\r\n    const handleLowClick=()=>{\r\n        //console.log('Uppercase was clicked');\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n         props.showAlert(\"Converted to lowercase!\",\"Success\")\r\n    }\r\n     const handleOnChange=(event)=>{\r\n        //console.log(\"On change\")\r\n         setText(event.target.value);\r\n         //props.showAlert(event.target.value)\r\n         \r\n     }\r\n     const clearText=(event)=>{\r\n         let newText=document.getElementById('clear').value=\"\";\r\n         setText(newText);\r\n          props.showAlert(\"Text cleared!\",\"Success\")\r\n     }\r\n     const copyText=()=>{\r\n         let text=document.getElementById('myBox');\r\n         text.select();\r\n         text.setSelectionRange(0,9999);\r\n         navigator.clipboard.writeText(text.value);\r\n          props.showAlert(\"Text Copied!\",\"Success\")\r\n     }\r\n     const handleExtraSpaces=()=>{\r\n         let newText=text.split(/[ ]+/);\r\n         setText(newText.join(\" \"))\r\n          props.showAlert(\"Extraspaces removed!\",\"Success\")\r\n     }\r\n     const myStyle={\r\n         backgroundColor:props.mode==='light'?'white':'black',\r\n         color:props.mode==='light'?'black':'white'\r\n\r\n     }\r\n\r\n    //eslint-disable-next-line\r\n    const [text,setText]=useState('');\r\n    //text=\"newText\";//Wrong way to change the text\r\n    //setText(\"Enter the text here\");//Correct way to change\r\n    return (\r\n        <>\r\n        <div className=\"container\" >\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n               <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={myStyle} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-3\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button id=\"clear\"className=\"btn btn-primary mx-2\" onClick={clearText}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={copyText}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2 my-3\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container mb-3\">\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008*text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:'Enter something in the textbox to preview'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    /* const capitalize = (word) => {\r\n        const lower = word.toString().toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    } */\r\n    return (\r\n        <div>\r\n            <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type} </strong>{props.alert.msg}\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\n// eslint-disable-next-line no-unused-vars\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n//let name=\"samarth\";\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [textMode, setTextMode] = useState('Enable Dark Mode');\n  const [alert, setAlert] = useState('');\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    \n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      setTextMode('Enable Light Mode')\n      document.body.style.backgroundColor = \"#fadbac\"\n      showAlert(\"Dark Mode has been enabled\", \"Success\");\n      document.title = 'TextUtils - Dark Mode';\n      \n    }\n    else {\n      setMode('light')\n      setTextMode('Enable Dark Mode')\n      document.body.style.backgroundColor = \"white\"\n      showAlert(\"Light Mode has been enabled\", \"Success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n    // setInterval(() => {\n    //   document.title = 'TextUtils-Home'\n    // }, 2000);\n    // setInterval(() => {\n    //   document.title = \"Install TextUtils Now\"\n    // },1500);\n  }\n  return (\n    <>\n      {/* <Navbar title=\"Samarth Patel\" aboutText=\"About  Us\"/> */}\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} textMode={textMode} />\n        <Alert alert={alert} />\n        <div className=\"container mb-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/\"> */}\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n            {/* </Route>\n        </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}